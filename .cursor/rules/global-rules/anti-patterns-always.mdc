---
description: 
globs: ["*.ts", "*.tsx", "*.js", "*.jsx", "*.py", "**/src/**/*", "**/components/**/*", "**/backend/**/*", "**/examples/**/*"]
alwaysApply: false
---

# Anti-Patterns & What NOT to Do

## ❌ Code Anti-Patterns
- **Don't use classes**: Prefer functional components and pure functions
- **Don't use `any` type**: Always provide proper TypeScript types
- **Don't use default exports**: Use named exports for better tree-shaking
- **Don't use useRef for state**: Use useState/useReducer instead
- **Don't ignore errors**: Always handle and log errors explicitly
- **Don't use npm**: Rosa project uses Bun package manager
- **Don't use version constraints**: In requirements.txt, use latest versions

## ❌ Rosa Architecture Violations
- **Don't call Tavus models directly**: Complex logic goes through Python backend
- **Don't create separate services**: Extend existing Agent1.py backend
- **Don't modify core CVI components**: Extend them instead
- **Don't skip CVIProvider wrapper**: Required for Daily.co context
- **Don't store user state**: Rosa is stateless between sessions
- **Don't hardcode language content**: Support 6 UN languages

## ❌ Performance Anti-Patterns
- **Don't use inline objects**: `style={{}}` causes unnecessary re-renders
- **Don't overuse useEffect**: Prefer event handlers and derived state
- **Don't ignore memoization**: Use useCallback for event handlers
- **Don't block the main thread**: Keep operations under 200ms
- **Don't forget cleanup**: Always clean up timers, subscriptions, conversations

## ❌ Security & Compliance Violations
- **Don't expose secrets**: Use environment variables properly
- **Don't skip input validation**: Validate all user inputs
- **Don't ignore red zone filtering**: All content must pass diplomatic compliance
- **Don't store sensitive data**: Rosa follows UN data protection standards
- **Don't skip error logging**: All violations must be logged

## ❌ Development Workflow Mistakes
- **Don't work outside examples/cvi-ui-conversation/**: Main development directory
- **Don't ignore existing patterns**: Reference working examples first
- **Don't skip testing**: Test function calls incrementally
- **Don't ignore documentation**: Always check dev_docs/tavus.txt
- **Don't work without the implementation plan**: Reference rosa-split-screen-simple-implementation.md

## ❌ UI/UX Anti-Patterns
- **Don't use touch interactions**: Rosa is voice-only
- **Don't ignore mobile/responsive**: Support multiple screen sizes
- **Don't forget accessibility**: Include proper ARIA labels
- **Don't overload the right panel**: Keep content focused and scannable
- **Don't ignore loading states**: Show progress during function calls

## ❌ Function Calling Mistakes
- **Don't return inconsistent formats**: Always return (app_message, response_text)
- **Don't skip error cases**: Handle all possible failure scenarios
- **Don't ignore multilingual**: Support all 6 UN languages
- **Don't forget QR compatibility**: Structure data for QR code generation
- **Don't skip validation**: Validate all function parameters

## ❌ Testing Anti-Patterns
- **Don't skip integration tests**: Test the full function call pipeline
- **Don't ignore edge cases**: Test error conditions and boundary cases
- **Don't skip performance tests**: Verify sub-200ms response times
- **Don't ignore multilingual testing**: Test all supported languages
- **Don't work without proper debugging**: Use console logging and proper error handling

## ✅ When in Doubt
1. **Check existing examples**: Look at working patterns first
2. **Reference implementation plan**: Follow rosa-split-screen-simple-implementation.md
3. **Copy proven patterns**: WeatherHandler.tsx and CTBTOHandler.tsx work
4. **Test incrementally**: Build on working functionality
5. **Ask specific questions**: Provide context about what you're trying to achieve
