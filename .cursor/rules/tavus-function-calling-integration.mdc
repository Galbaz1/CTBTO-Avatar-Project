---
description: Guide for integrating external APIs with Tavus function calling and tool integration
---

# Tavus Function Calling Integration Pattern

## Overview
This rule documents the successful integration pattern for external APIs with Tavus CVI function calling, based on the working weather API implementation in [examples/cvi-ui-conversation](mdc:examples/cvi-ui-conversation).

## Architecture Pattern

### Two-Service Architecture
1. **External API Service**: Express server handling API calls (port 3001)
2. **React Frontend**: Vite dev server with Tavus CVI (port 5173)
3. **Communication**: React makes HTTP requests to Express server
4. **Tool Calls**: Tavus calls React components which proxy to Express

### Key Files Structure
- **API Server**: `weather-server.js` - Express server with API endpoints
- **Tool Handler**: `src/components/WeatherHandler.tsx` - React component handling tool calls
- **Integration**: `src/App.tsx` - Includes WeatherHandler component
- **API Config**: `src/api/createConversation.ts` - Persona configuration

## Implementation Steps

### 1. External API Server Setup
```javascript
// weather-server.js pattern
import express from 'express';
import cors from 'cors';
import 'dotenv/config';

const app = express();
app.use(cors());
app.use(express.json());

// Location-specific endpoint (Vienna-first approach)
app.get('/api/weather/vienna', async (req, res) => {
  // Default to Vienna for conference context
  const weather = await fetchWeatherAPI('Vienna, Austria');
  res.json(formatConferenceWeather(weather));
});

// General weather endpoint  
app.get('/api/weather', async (req, res) => {
  const location = req.query.location || 'Vienna, Austria';
  const weather = await fetchWeatherAPI(location);
  res.json(formatWeather(weather));
});
```

### 2. React Tool Call Handler
```typescript
// WeatherHandler.tsx - Working implementation using useDailyEvent
import { useDailyEvent } from '@daily-co/daily-react';

export const WeatherHandler = ({ onWeatherUpdate }: { onWeatherUpdate?: (weather: any) => void }) => {
  useDailyEvent('app-message', async (event: any) => {
    const data = event.data;
    
    if (data?.event_type === 'conversation.tool_call') {
      const toolName = data.properties?.name;
      
      if (toolName === 'getWeatherAndTime') {
        try {
          // Parse arguments with Vienna default
          const args = JSON.parse(data.properties?.arguments || '{}');
          const location = args.location || 'Vienna, Austria';
          
          console.log('üå§Ô∏è Getting weather for:', location);
          
          // Call Express API endpoint
          const response = await fetch(`http://localhost:3001/api/weather?location=${encodeURIComponent(location)}`);
          if (!response.ok) throw new Error(`API error: ${response.status}`);
          
          const weather = await response.json();
          console.log('‚úÖ Weather retrieved:', `${weather.temperature.celsius}¬∞C, ${weather.condition}`);
          
          // Optional: Update parent component state
          onWeatherUpdate?.(weather);
        } catch (error) {
          console.error('‚ùå Weather tool call failed:', error);
        }
      }
    }
  });

  return null; // Event handler only - no UI
};
```

### 3. App Integration
```typescript
// App.tsx integration
import { WeatherHandler } from './components/WeatherHandler';

function App() {
  return (
    <CVIProvider>
      <WeatherHandler />
      {/* Other components */}
    </CVIProvider>
  );
}
```

## Critical Success Factors

### Tool Call Naming Flexibility
- **Multiple Names**: Support both `getViennaWeather` and `getWeatherAndTime`
- **Reason**: Tavus LLM may call different variations of tool names
- **Implementation**: Use OR conditions in tool name checking

### Default Location Strategy
- **Conference-First**: Default to conference location (Vienna)
- **Empty Arguments**: Handle cases where Tavus calls tool without arguments
- **Graceful Fallback**: Always provide sensible defaults

### Error Handling
- **API Failures**: Graceful degradation with error messages
- **Network Issues**: Timeout handling and retry logic
- **Invalid Responses**: Validate API responses before returning

### Environment Configuration
- **API Keys**: Use environment variables for external API keys
- **CORS**: Enable cross-origin requests for local development
- **Ports**: Document standard port allocation (3001 for APIs, 5173 for React)

## Persona Configuration

### Function Call Integration
Ensure persona understands available tools:

```typescript
// In createConversation.ts or persona configuration
const systemPrompt = `...
You leverage your available tools proactively:
- Weather information for conference planning
- QR code generation for complex schedules or directions
- Real-time venue and event updates
...`;

const context = `...
YOUR CAPABILITIES:
- Real-time weather data for Vienna and conference planning
- Venue navigation and facility information
...`;
```

## Running Services

### Development Workflow
```bash
# Terminal 1: Start weather service
cd examples/cvi-ui-conversation
node weather-server.js

# Terminal 2: Start React app  
cd examples/cvi-ui-conversation
bun run dev
```

### Alternative: Background Services
```bash
# Start both services in background
bun run dev &
node weather-server.js &
```

## Testing Verification

### Tool Call Testing
1. **Basic Call**: "What's the weather in Vienna?"
2. **Empty Args**: Verify default Vienna response
3. **Different Locations**: Test other cities
4. **Error Handling**: Test with weather service down

### Debug Logging
- Add console.log for tool calls received
- Log API responses and errors
- Monitor network requests in browser dev tools

## Common Pitfalls

### Tool Name Mismatches
- **Issue**: Tavus calls 'getWeather' but handler expects 'getViennaWeather'
- **Solution**: Support multiple tool name variations

### CORS Errors
- **Issue**: React can't call Express server
- **Solution**: Add cors() middleware to Express server

### Environment Variables
- **Issue**: API keys not found in different environments
- **Solution**: Load from both `.env` and `.env.local`, support multiple variable names

### Service Dependencies
- **Issue**: React starts before weather service
- **Solution**: Add error handling and retry logic in WeatherHandler

## Conversation Logging

### Event Structure (Critical Implementation Details)
```typescript
// Tavus conversation.utterance events use 'speech' property, NOT 'text'
if (data?.event_type === 'conversation.utterance') {
  const text = data.properties?.speech; // ‚úÖ Correct property name
  const role = data.properties?.role;   // 'user' | 'replica'
  
  if (role === 'user') {
    console.log('üë§ User:', text);
  } else if (role === 'replica') {
    console.log('ü§ñ ROSA:', text);
  }
}
```

### Simple Logger Pattern
```typescript
// SimpleConversationLogger.tsx - Focused logging for user/ROSA/tools
useDailyEvent('app-message', (event: any) => {
  const data = event.data;
  
  // User & ROSA conversation
  if (data?.event_type === 'conversation.utterance') {
    const text = data.properties?.speech;
    const role = data.properties?.role;
    // Log based on role instead of guessing
  }
  
  // Tool calls
  if (data?.event_type === 'conversation.tool_call') {
    const toolName = data.properties?.name;
    const args = data.properties?.arguments;
    // Log tool execution
  }
});
```

## Extension Pattern

This pattern can be extended for other external APIs:
- Replace weather endpoints with your API
- Update tool handler component name and logic
- Maintain the two-service architecture
- Follow the same error handling and default patterns
- Add appropriate logging for debugging

## Performance Considerations

- **Caching**: Consider caching API responses for repeated calls
- **Rate Limiting**: Implement rate limiting for external API calls
- **Response Time**: Keep API responses under 200ms for optimal UX
- **Parallel Services**: Both services can run simultaneously without conflicts
- **Logging Overhead**: Simple logging has minimal performance impact
