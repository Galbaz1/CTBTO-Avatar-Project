---
description: Guide for implementing Tavus CVI function calling and tool integration
---

# Tavus Function Calling Guide

## Function Calling Architecture
Tavus supports OpenAI-style function calling to bridge the avatar conversation to backend logic. This is the preferred pattern for Rosa's Python integration.

## Implementation Patterns

### Persona Tool Definition
```json
{
  "persona_name": "Rosa",
  "layers": {
    "llm": {
      "model": "tavus-gpt-4o",
      "tools": [
        {
          "type": "function",
          "function": {
            "name": "function_name",
            "description": "Clear description for the LLM",
            "parameters": {
              "type": "object",
              "properties": {
                "param": {"type": "string", "description": "Parameter description"}
              },
              "required": ["param"]
            }
          }
        }
      ],
      "speculative_inference": true
    }
  }
}
```

### Event Handling
- Listen for `conversation.tool_call` events
- Extract function name and arguments from event data
- Call corresponding Python functions
- Return responses in OpenAI chat completion format

## Reference Examples
- **E-commerce Tools**: [examples/cvi-frontend-backend-tools/spawn_room.py](mdc:examples/cvi-frontend-backend-tools/spawn_room.py)
- **Click Interactions**: [examples/cvi-hover-over-website/src/api/createPersona.ts](mdc:examples/cvi-hover-over-website/src/api/createPersona.ts)
- **Custom LLM**: [examples/cvi-custom-llm-with-backend/](mdc:examples/cvi-custom-llm-with-backend)

## Best Practices
- Use clear, specific function names and descriptions
- Include all parameters in the `required` array
- Implement proper error handling for function calls
- Use `speculative_inference: true` for better responsiveness
