# Rosa Split-Screen UI Development

## Current Implementation Reference
- **Base Component**: `examples/cvi-ui-conversation/src/components/RosaDemo.tsx`
- **Working Pattern**: `examples/cvi-frontend-backend-tools/hack-cvi-shop/` e-commerce example
- **Implementation Plan**: `dev_docs/rosa-split-screen-simple-implementation.md`

## Split-Screen Layout Requirements
```typescript
// ✅ Grid layout pattern (from RosaDemo.tsx)
<div className="grid h-screen" style={{ gridTemplateColumns: '1fr 1fr' }}>
  {/* Left Panel - Tavus Avatar */}
  <div className="flex flex-col">
    <CVIProvider key={conversationId}>
      <Conversation conversationUrl={conversationUrl} />
    </CVIProvider>
  </div>
  
  {/* Right Panel - Dynamic Content */}
  <div className="flex flex-col bg-gray-50 p-4">
    {currentContent && renderContent(currentContent)}
  </div>
</div>
```

## Content State Management
```typescript
// ✅ Simple state pattern for content switching
interface ContentState {
  type: 'speaker' | 'venue' | 'qr' | 'idle';
  data: any;
  timestamp: number;
}

const [currentContent, setCurrentContent] = useState<ContentState | null>(null);

// Content rendering based on type
const renderContent = (content: ContentState) => {
  switch (content.type) {
    case 'speaker':
      return <SpeakerProfile speaker={content.data} />;
    case 'venue':
      return <VenueMap venue={content.data} />;
    case 'qr':
      return <QRCodeDisplay data={content.data} />;
    default:
      return <IdleScreen />;
  }
};
```

## Function Call Integration
```typescript
// ✅ App-message handler (copy from AppMessageHandler pattern)
useDailyEvent('app-message', useCallback((ev: any) => {
  console.log('🏛️ Conference event:', ev.data);
  
  if (ev.data?.event === 'show_speaker_info') {
    const speakerId = ev.data.data?.speaker_id;
    setCurrentContent({
      type: 'speaker',
      data: speakers.find(s => s.id === speakerId),
      timestamp: Date.now()
    });
  }
  
  if (ev.data?.event === 'show_venue_map') {
    const venueId = ev.data.data?.venue_id;
    setCurrentContent({
      type: 'venue',
      data: venues.find(v => v.id === venueId),
      timestamp: Date.now()
    });
  }
}, [speakers, venues]));
```

## Component Architecture
```typescript
// ✅ Modular component structure
const SplitScreenConference = () => {
  return (
    <div className="split-screen-container">
      <AvatarPanel />
      <ContentPanel />
    </div>
  );
};

const ContentPanel = () => {
  const [content, setContent] = useContentState();
  
  return (
    <div className="content-panel">
      <ContentRenderer content={content} />
      <QRCodeSection content={content} />
    </div>
  );
};
```

## Data Structures (Start Simple)
```typescript
// ✅ Phase 1: Hardcoded data for proof-of-concept
const SPEAKERS = [
  {
    id: 'dr-chen',
    name: 'Dr. Sarah Chen',
    title: 'Nuclear Verification Expert',
    photo: 'https://via.placeholder.com/150x150/4285f4/ffffff?text=SC',
    bio: 'Leading expert in seismic verification...'
  }
];

const VENUES = [
  {
    id: 'main-auditorium',
    name: 'Hofburg Palace - Main Auditorium',
    mapImage: '/assets/hofburg-main-route.jpg',
    directions: 'From kiosk: Go straight 50m, turn right...'
  }
];
```

## Content Display Patterns
- **Speaker Cards**: Photo, name, title, brief bio, session info
- **Venue Maps**: Static images with route highlighting from kiosk
- **QR Codes**: Generate for complex info, speaker contacts, venue details
- **Session Info**: Time, location, description, speakers
- **Real-time Updates**: Content changes based on voice queries

## State Transitions
1. **Idle State**: Rosa logo or conference branding
2. **Loading State**: Show spinner during function call processing
3. **Content State**: Display requested information
4. **Error State**: Fallback message if content unavailable
5. **Timeout**: Return to idle after 30 seconds of inactivity

## Performance Requirements
- **Content switching**: <100ms UI updates
- **Image loading**: Preload common assets
- **Memory management**: Clean up unused content data
- **Responsive layout**: Handle different screen sizes gracefully

## Development Progression
1. **Phase 1**: Static hardcoded data, basic layout ✅
2. **Phase 2**: Function call integration, dynamic content
3. **Phase 3**: Real speaker/venue data, QR generation
4. **Phase 4**: Multilingual content, production polish
