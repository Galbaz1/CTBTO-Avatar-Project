---
description: Development workflow and best practices for the Tavus CVI Rosa project
---

# Development Workflow

## Primary Development Environment
Work in [examples/cvi-ui-conversation/](mdc:examples/cvi-ui-conversation) as the main development base for Rosa.

## Development Setup
```bash
cd examples/cvi-ui-conversation
bun install  # or npm install
bun dev      # or npm run dev
```

## Key Development Principles

### 1. Reference Examples First
Before implementing new features, check these examples:
- **Function calling**: [examples/cvi-frontend-backend-tools/](mdc:examples/cvi-frontend-backend-tools)
- **Tool interactions**: [examples/cvi-hover-over-website/](mdc:examples/cvi-hover-over-website) 
- **Custom backends**: [examples/cvi-custom-llm-with-backend/](mdc:examples/cvi-custom-llm-with-backend)

### 2. Tavus Documentation Priority
Always consult [dev_docs/tavus.txt](mdc:dev_docs/tavus.txt) for:
- Function calling syntax and patterns
- Persona configuration options
- Layer customization (LLM, TTS, STT, Perception)
- Component library usage

### 3. Incremental Development
Follow this progression:
1. **Foundation**: Get basic conversation working
2. **Function calls**: Add Rosa-specific function definitions
3. **UI modifications**: Split-screen, language switching
4. **Backend integration**: Python multi-agent system
5. **Multilingual**: 6 UN languages support
6. **Production polish**: Error handling, safety, performance

### 4. Testing Strategy
- Test function calls with simple Python endpoints first
- Validate persona configurations before complex logic
- Use `speculative_inference: true` for performance testing
- Test all 6 languages iteratively

### 5. Debugging & Logging
- Use SimpleConversationLogger for user/ROSA/tool call debugging
- Key event properties: `conversation.utterance` uses `properties.speech` (not text)
- Monitor tool calls: `conversation.tool_call` with `properties.name` and `properties.arguments`
- Test conversation flow with console logging before production
- Run external services (Express API) in separate terminal for debugging

### 6. File Organization
- Keep Rosa-specific logic separate from base CVI components
- Use clear naming conventions for function calls
- Document any deviations from example patterns
- Maintain clean separation between UI and business logic

## Common Pitfalls to Avoid
- Don't modify core CVI components directly; extend them
- Always handle function call errors gracefully
- Remember persona vs replica distinction (behavior vs appearance)
- Don't forget CVIProvider wrapper for Daily.co context
