---
description: 
globs: ["*.py"]
alwaysApply: false
---

# Python Backend Development Rules

## Rosa Backend Architecture
- **Main Agent**: `examples/cvi-ui-conversation/backend/Agent1.py` - Core function definitions
- **API Server**: Express/Node.js bridge between Tavus and Python
- **Function Pattern**: Extend existing Agent1.py, don't create separate services
- **No version constraints**: Use latest package versions in requirements.txt

## Function Definition Pattern
```python
# ‚úÖ Rosa function call pattern (extend Agent1.py)
def show_speaker_info(speaker_name: str) -> tuple[dict, str]:
    """
    Display speaker information on the split-screen UI.
    
    Args:
        speaker_name: Name of the speaker to display
        
    Returns:
        tuple: (app_message_dict, response_text)
    """
    # Input validation first
    if not speaker_name or not isinstance(speaker_name, str):
        return None, "Please specify a speaker name."
    
    # Data processing
    speaker_data = find_speaker_by_name(speaker_name)
    
    if not speaker_data:
        return None, f"Speaker '{speaker_name}' not found."
    
    # Return app-message for frontend + response text
    app_message = {
        "event": "show_speaker_info",
        "data": {"speaker_id": speaker_data["id"]}
    }
    
    response = f"Here's information about {speaker_name} on your screen."
    return app_message, response
```

## Code Style (PEP 8 + Rosa Patterns)
- **Type hints**: All function parameters and returns
- **Docstrings**: Google style docstrings for public functions
- **Error handling**: Explicit error types, no silent failures
- **Early returns**: Guard clauses for validation
- **Pure functions**: No side effects, clear input/output

## Error Handling
```python
# ‚úÖ Specific error types
def process_venue_request(location: str) -> tuple[dict, str]:
    if not location:
        raise ValueError("Location parameter is required")
    
    try:
        venue_data = get_venue_data(location)
    except VenueNotFoundError as e:
        logger.error(f"Venue lookup failed: {e}")
        return None, f"Venue '{location}' not found in our database."
    except APIError as e:
        logger.error(f"API error during venue lookup: {e}")
        return None, "Unable to access venue information right now."
    
    return venue_data, f"Showing directions to {location}."
```

## Rosa Integration Requirements
- **Multilingual support**: Handle 6 UN languages in input/output
- **<200ms response**: Optimize for speed, use caching where appropriate
- **Red zone compliance**: Validate all outputs for diplomatic content
- **QR code data**: Structure responses for QR code conversion
- **Session stateless**: No persistent user state between calls

## Function Call Integration
```python
# ‚úÖ Working pattern from WeatherHandler/CTBTOHandler
def rosa_conference_function(parameter: str) -> tuple[dict, str]:
    """Template for new Rosa functions."""
    
    # 1. Validate input
    if not parameter:
        return None, "Missing required parameter."
    
    # 2. Process data (keep under 200ms)
    result_data = process_conference_data(parameter)
    
    # 3. Return app-message + response
    app_message = {
        "event": "conference_data_update",
        "data": result_data
    }
    
    response = f"Updated conference information for {parameter}."
    return app_message, response
```

## Performance Optimization
- **Caching**: Use `@lru_cache` for expensive operations
- **Async patterns**: Use `asyncio` for I/O operations
- **Database queries**: Optimize queries, use connection pooling
- **Memory management**: Clean up large objects promptly

## Testing Requirements
- **Unit tests**: Test each function in isolation
- **Integration tests**: Test function call pipeline end-to-end
- **Performance tests**: Verify <200ms response times
- **Multilingual tests**: Test all 6 UN languages

## Dependencies Management
```python
# requirements.txt - NO version constraints
# ‚úÖ Correct format
openai
requests
fastapi
pydantic

# ‚ùå Don't use version constraints
# openai>=1.12.0
```

## Debugging & Logging
- **Structured logging**: Use JSON format for log parsing
- **Debug markers**: Use emojis for easy log scanning (`üî•`, `üéØ`, `‚ö†Ô∏è`)
- **Performance tracking**: Log execution times for optimization
- **Error context**: Include request context in error logs
